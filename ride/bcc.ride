{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}


#
# @TODO
# - Price of device and car creation as data entry or oracle (consider)
# - Sponsorship token
#


let NONE = "none"
                
let startDate = 1577833200000 # 01.01.2020 00:00, TimeZone: local

#
# @TODO try with isDefined func
#
func numberDataKeyExists(key: String) = {
    let bool = match getInteger(this, key) {
        case a:Int => true
        case _ => false
    }
    bool
}

func getNumberByKey(key: String) = {
    let num = match getInteger(this, key) {
        case a:Int => a
        case _ => 0
    }
    num
}

func getStrByKey(key: String) = {
    let str = match getString(this, key) {
        case a:String => a
        case _ => NONE
    }
    str
}

func getUserBalanceKey(userAddress: String) = {
  userAddress + "_usr_balance"
}

func getUserBalanceValue(userAddress: String) = {
  getNumberByKey(getUserBalanceKey(userAddress))
}

func getUserBalanceExpirationKey(userAddress: String) = {
  userAddress + "_usr_balance_expiration"
}

func getUserBalanceExpirationValue(userAddress: String) = {
  getNumberByKey(getUserBalanceExpirationKey(userAddress))
}

func isUserBalanceExpired(userAddress: String) = {
  getUserBalanceExpirationValue(userAddress) - lastBlock.timestamp < 0
}

# func getUserBalanceValidToValue(userAddress: String) = {
#   getNumberByKey(getUserBalanceExpirationKey(userAddress))
# }


func getDeviceBalanceKey(deviceAddress: String) = {
  deviceAddress + "_dev_balance"
}

func getDeviceBalanceValue(deviceAddress: String) = {
  getNumberByKey(getDeviceBalanceKey(deviceAddress))
}

func getDevicePriceKey(deviceAddress: String) = {
  deviceAddress + "_dev_price"
}

func getDevicePriceValue(deviceAddress: String) = {
  getNumberByKey(getDevicePriceKey(deviceAddress))
}

func getAccountCreationPriceKey() = {
  "account_creation_price"
}

func getAccountCreationPriceValue() = {
  getNumberByKey(getAccountCreationPriceKey())
}

func getDeviceCreationPriceKey() = {
  "device_creation_price"
}

func getDeviceCreationPriceValue() = {
  getNumberByKey(getDeviceCreationPriceKey())
}

func getAssetIdKey() = {
  "asset_id"
}

func getAssetId() = {
  getStrByKey(getAssetIdKey())
}

func getAssetExpirationDateKey() = {
  "asset_expiration_date"
}

func getAssetExpirationDateValue() = {
  getNumberByKey(getAssetExpirationDateKey())
}


# what will be the 'timestamp' in X days
func getTimestampIn(days: Int) = {
  lastBlock.timestamp + (days * (24*60*60*1000))
}

func isAssetExpired() = {
  getAssetExpirationDateValue() - lastBlock.timestamp < 0
}

# retrun day number from startDate
func dayNumber(timestamp:Int) = {
  if (timestamp < startDate) then throw("too early")
  else
    (timestamp - startDate) / (24*60*60*1000)
}


func currentDayNumber() = {
  dayNumber(lastBlock.timestamp)
}

func getDeviceReservationKey(deviceAddress: String, dayNr: Int) = {
  deviceAddress + "_dev_reservation_" + toString(dayNr)
}

# @retrun renter's address
func getDeviceReservationValue(deviceAddress: String, dayNr: Int) = {
  getStrByKey(getDeviceReservationKey(deviceAddress, dayNr))
}

# - Payment only in SmartKey tokens
# - Payment cannot be less then account_creation_price. 
# - Account cannot exists
#
# - User balance data record has been added
# - If caller pay more then this overpayment will be added to his balance
@Callable(i)
func createAccount() = {
  let creationPrice  = getAccountCreationPriceValue()
  let userBalanceKey = getUserBalanceKey(toBase58String(i.caller.bytes))
  let assetId        = fromBase58String(getAssetId())
  let pmt            = extract(i.payment)  # creating variable with all data about a payment attached to the invokation
  let userBalanceExpirationKey = getUserBalanceExpirationKey(toBase58String(i.caller.bytes))

  
  if (!isDefined(pmt.assetId) || pmt.assetId != assetId) then throw("payment in bad tokens")
  else if ( pmt.amount < creationPrice) then throw("amount cannot be less than account creation price")
  else if (numberDataKeyExists(userBalanceKey) == true) then throw("user already exist")
  else {
    WriteSet([
      DataEntry(userBalanceKey, pmt.amount - creationPrice),
      DataEntry(userBalanceExpirationKey, getAssetExpirationDateValue())
    ])
  }
}




# - Creator has dApp account
# - The creator has sufficient funds
# - Device does not exist
# - Entered valid device address @TODO
# - Entered valid device price @TODO
#
# - Creator account has been charged
# - Device price data record has been added
# - Device balance data record has been added
@Callable(i)
func createDevice(deviceAddress: String, devicePrice: Int) = {
  let creationPrice     = getDeviceCreationPriceValue()
  let deviceBalanceKey  = getDeviceBalanceKey(deviceAddress)
  let devicePriceKey    = getDevicePriceKey(deviceAddress)
  let deviceExists      = numberDataKeyExists(deviceBalanceKey)
  let creatorBalanceKey = getUserBalanceKey(toBase58String(i.caller.bytes))
  let creatorBalance    = getUserBalanceValue(toBase58String(i.caller.bytes))
  let creatorExists     = numberDataKeyExists(creatorBalanceKey) # is caller user on whitelist ?
  let balanceExpired    = isUserBalanceExpired(toBase58String(i.caller.bytes))


  let pmt = extract(i.payment)  # creating variable with all data about a payment attached to the invokation

  if (creatorExists == false) then throw("not allowed")
  else if (balanceExpired) then throw("balance expired")
  else if (creatorBalance < creationPrice) then throw("not sufficient funds")
  else if (deviceExists == true) then throw("device already exist")

  else {
    let newBalance = creatorBalance - creationPrice 

    WriteSet([
      DataEntry(deviceBalanceKey, 0),
      DataEntry(devicePriceKey, devicePrice),
      DataEntry(creatorBalanceKey, newBalance)
    ])
  }
}


#
# allow only when: isAssetExpired && assetBalance == 0 
#
@Callable(i)
func updateAssetExpirationDate() = {
  let assetId = fromBase58String(getAssetId())
  let assetQuantity = assetBalance(this, assetId)

  if (!isAssetExpired()) then throw("too early to continue")
  else if (assetQuantity != 0) then throw("you have to burn all tokens first")
  else {
    let newAssetExpDate = getTimestampIn(30)
    WriteSet([ DataEntry(getAssetExpirationDateKey(), newAssetExpDate) ])
  }
}

@Callable(i)
func reserve(deviceAddress: String, date:Int) = {
  let userAddress    = toBase58String(i.caller.bytes)
  let deviceBalanceKey  = getDeviceBalanceKey(deviceAddress)
  let userBalanceKey = getUserBalanceKey(userAddress)

  let userExists     = numberDataKeyExists(userBalanceKey) # is caller user on whitelist ?
  let deviceExists   = numberDataKeyExists(deviceBalanceKey)

  let userBalance    = getUserBalanceValue(userAddress)
  let deviceBalance  = getDeviceBalanceValue(deviceAddress)
  let devicePrice    = getDevicePriceValue(deviceAddress)
  let dayNr          = dayNumber(date)
  
  if (userExists == false) then throw("user does not exist")
  else if (deviceExists == false) then throw("device does not exist")
  else if (isUserBalanceExpired(userAddress)) then throw("balance expired")
  else if (userBalance < devicePrice) then throw("not sufficient funds")
  else if (date < startDate) then throw("too early date given") # refactor
  else if (getDeviceReservationValue(deviceAddress, dayNr) != NONE) then throw("reservation for given day already exist")
  else {
    let newUserBalance = userBalance - devicePrice
    let newDeviceBalance = deviceBalance + devicePrice

    WriteSet([ 
      DataEntry(userBalanceKey, newUserBalance),
      DataEntry(getDeviceReservationKey(deviceAddress, dayNr), userAddress),
      DataEntry(deviceBalanceKey, newDeviceBalance)
    ])
  }
}




@Callable(i)
func deposit() = {
  let pmt = extract(i.payment)
  let userAddress    = toBase58String(i.caller.bytes)
  let userBalanceKey = getUserBalanceKey(userAddress)
  let userBalance    = getUserBalanceValue(userAddress)
  let userExists     = numberDataKeyExists(userBalanceKey) # is caller user on whitelist ?
  let assetId        = fromBase58String(getAssetId())
  let balanceExpired = isUserBalanceExpired(userAddress)
  let userBalanceExpirationKey = getUserBalanceExpirationKey(userAddress)
  let userBalanceExpiration = getUserBalanceExpirationValue(userAddress)

  if (userExists == false) then throw("not allowed")
  else if (!isDefined(pmt.assetId) || pmt.assetId != assetId) then throw("payment in bad tokens")
  else {
    let newBalance = if balanceExpired then pmt.amount else userBalance + pmt.amount
    let newBalanceExp = if balanceExpired then getAssetExpirationDateValue() else userBalanceExpiration

    WriteSet([ 
      DataEntry(userBalanceKey, newBalance),
      DataEntry(userBalanceExpirationKey, newBalanceExp)
    ])
  }
}

#
#  BurnTransaction - Only BCC tokens && BCC is expired && only all tokens in balance
#  ReissueTransaction - Only BCC tokens && only When Bcc balance == 0 && BCC is NOT expired yet
#
@Verifier(tx)
func verify() = {
    let correctAssetId = fromBase58String(getAssetId())
    let assetQuantity = assetBalance(this, correctAssetId)

    match tx {
      case r: ReissueTransaction => r.assetId == correctAssetId && !isAssetExpired() && assetQuantity == 0
      case b: BurnTransaction => b.assetId == correctAssetId && isAssetExpired() && b.quantity == assetQuantity
      case _ => false
  }
}
